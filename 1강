---

### 프로그래밍의 의미, 활용성

- 컴퓨터 :  사실 굉장히 빠른 연산 능력을 가진 계산기
    - 컴퓨터로 영상, 게임, 인터넷 등 다양한 것을 하기 위해 미리 만들어져 있는 프로그램을 좀 쉽게 사용할 수 있도록 해주는 앱, 어플리케이션 등을 제작하기 위해 프로그래밍 언어라는 것을 배운다

---

### 프로세싱 : 미디어 아트 및 프로그래밍 소프트웨어

- 프로세싱
    - 미디어 아트라는 장르, 컴퓨터 프로그래밍이나 소프트웨어를 이용한 디자인 혹은 예술 같은 것들을 빠르게 만들어서 결과물을 테스트해볼 수 있을 정도로 간단하게 접근이 가능한 프로그램 개발
    - 미술이나 디자이너인 사람들이 쉽게 사용할 수 있는 만든 소프트웨어
    - ‘JAVA’ 언어를 베이스로 함

---

### 프로세싱 소프트웨어와 프로그래밍 언어

- JAVA의 경우, 웹, 안드로이드 os 등 다양한 어플리케이션 개발에 쓰임
- 프로세싱의 장점
    - 디자이너나 비주얼 아티스트를 위해 만들어진 소프트웨어이기에 많은 명령어들이 화면상의 어떤 도형이나 이미지를 그리는 것에 초점이 맞춰져 있음
- 프로세싱의 성능 최적화를 위해 고사양 컴퓨터 대신 프로그래밍 스킬로 해결하는 것이 중요

---

### 프로그래밍 최적화 : 프로세싱과 오픈 프레임웍스 활용

- 프로그래밍 스킬 향상으로 최적화 시키는 방법 - 프레임워크 활용
- 오픈프레임웍스는 프로세싱과 비슷한 언어 체계를 가지고 있으며, 전환은 비교적 쉬움

---

### 리눅스 OS : 오픈 소스의 장점과 라이브러리 활용

- 리눅스 OS → 오픈 소스, 코드를 서로 공유하고 무료로 사용 가능
- 오픈 소스 방식으로 소프트웨어를 개선, 사용자들끼리 코드를 공유하여 선순환 구조 형성
- 프로세싱 → 라이브러리 많이 활용, 추가 기능 위해 다양한 무료 소프트웨어 활용 가능
- 소프트웨어 라이브러리 활용 → 필요한 기능 찾아 사용, 개발에 필요한 라이브러리 존재

---

### 프로세싱 다운로드 및 설치 방법 (맥 OS 및 윈도우)

- 프로세싱 → 오픈소스이며 강점과 처리 소프트웨어로 인해 널리 사용됨
- 맥 OS에서 다운로드하려면 웹브라우저로 [processing.org](http://processing.org) 사이트에 들어가서 운영체제에 맞는 버전을 다운로드 후 설치
- 맥 OS의 경우 압축 파일 다운로드 후 압축 풀고 응용프로그램으로 드래그 앤 드롭하여 간단히 설치
- 프로세싱을 실행하면 ‘웰컴 투 프로세싱’ 창이 뜨면 코드 작성하고 저장 → ‘프로세싱’ 폴더에 저장되어 관리할 수 있음
- 윈도우의 설치 → [processing.org](http://processing.org) 사이트에서 윈도우 용 64bit 버전 다운로드 설치, 압축 푼 후 ‘프로세싱’ 폴더를 통해 코드 관리할 수 있음

---

### 프로세싱 소프트웨어 설치 및 화면 기본 개념 소개

- 프로세싱 소프트웨어 설치 → 간단하게 다운로드하고 실행 → 사용 가능
- 프로세싱 : 화면에 그리는 것에 초점을 맞춘 소프트웨어 / 선, 점, 도형을 그리는 명령어가 사용됨
- 컴퓨터 그래프에서 x, y 축의 좌표 체계를 이해해야 그림을 그릴 수 있음
    - x축은 오른쪽, y축은 위쪽으로 증가
    - 수학 그래프에서 중심축이 0,0일 때 → 위쪽과 오른쪽은 양수, 아래쪽과 왼쪽은 음수

---

### 컴퓨터 그래픽에서의 픽셀과 좌표

- 컴퓨터 그래픽에서의 좌표 → 화면 좌측 상단에 픽셀 0, 수학에서의 중심점과 유사, 프로세싱에서 좌측 상단이 0,0으로 기준이 됨
- 화면을 확대 → 픽셀의 정사각형 구조가 보임, 픽셀 값은 고해상도 모니터에서 다소 차이가 날 수 있음
- 픽셀 좌표 → 좌측 상단 0,0을 기준으로 x는 우측으로 증가, y는 아래로 증가 / 코딩 시 이 좌표를 기억하며 프로그래밍함
- 프로세싱 소프트웨어 환경 설정 같게 하여 쉽게 코딩할 수 있음, 프로세싱에서 제공하는 0,0의 좌표와 일반 고해상도 모니터의 픽셀 값의 차이 나중에 설명함

---

### 글꼴 설정 및 코딩 편의성

- 스케치 에디터에서 ‘나눔고딕 코딩’ 글꼴 설치하여 한글이 깨지지 않도록 함
- 코딩용 글꼴을 선택 → 숫자 ‘0’과 영문 ‘O’을 구분, 헷갈림을 방지
- 코딩용 글꼴에는 숫자 ‘0’의 다른 표시가 있어 헷갈리지 않도록 디자인되어 있음
- 글꼴 설정은 코딩 시 숫자와 문자 간 혼동을 방지, 코딩하는 데 편의를 제공함

---

### 프로세싱 환경 설정

- ‘나눔고딕 코딩’ 글꼴 권장, 다른 글꼴 선택 가능함
- 글꼴 편안한 크기로 선택, 강좌 위해서 18pt 정도로 설정
- 다국어 입력 허용 : 한글 입력 위해 반드시 체크함
- 코드에 오류가 있는지 확인하는 기능인 오류 검사 활성화하기
- 코드에 오류가 있을 때 메시지를 보여주는 오류 메시지 표시 체크하기
- 코딩 편의를 위해 코드 자동완성 기능을 활성화하기
- 필요한 경우 메모리 설정 등을 조정

> ⚠️주의 사항
> 
- 맥 사용자 중 한영 전환을 컨트롤 스페이스로 하는 경우, 한글 입력을 위해 컨트롤 스페이스를 사용하지 않아야 한다 대신 커맨드 스페이스 등을 사용한다
- 프로세싱에서 사용하는 메모리 설정은 기본적으로 256MB이며, 필요에 따라 늘릴 수 있다

---

### 프로세싱 인터페이스 설명

- 실행 버튼 : 코드 실행하여 결과 확인하는 버튼 / 실행 중인 프로그램은 실행 창에 표시
- 정지 버튼 : 실행 중인 프로그램을 종료하는 버튼
- 디버깅 버튼 : 프로그램 오류를 확인하고 디버깅하는 기능, 초반엔 사용하지 않을 것
- JAVA 라고 되어 있는 부분 : 프로세싱을 기반으로 하는 모드 선택, 기본적으로 ‘JAVA’를 선택함
- 다른 모드 추가 : JAVA 이외의 다른 언어나 모드를 선택하여 프로그래밍할 수 있음 / 추가 모드는 나중에 필요에 따라 선택할 수 있음

---

### 프로세싱 파일 저장

- 스케치 이름: 프로세싱 창 상단에 있는 파일 이름. 자동으로 현재 날짜와 시간으로 설정, 열 때마다 변경됨
- 저장하기: 커맨드 + S (또는 윈도우에서는 Ctrl + S)를 눌러 파일을 저장할 수 있음
- 저장 위치: 프로세싱 폴더 내의 기본 위치에 파일이 저장됨
- 저장된 파일 확인: 저장된 파일은 프로세싱 폴더 내에 동일한 이름의 폴더와 .pde 확장자 파일로 저장됨
- 이동 및 복사: 저장된 파일을 이동하거나 복사할 때는 폴더 전체를 이동해야 함 / 프로세싱은 같은 이름의 폴더를 자동으로 생성하여 관리함

---

### 프로세싱 파일 관리 및 인터페이스

- 새 탭 추가 : 코드를 분리하여 관리할 수 있음
- 스케치 폴더 열기 : 현재 프로세싱 파일이 저장된 위치를 열어줌
- 에러 및 콘솔 창 : 코드 실행 상태 및 오류 메시지를 표시하는 창
- 에러 창 : 코드에서 발생한 오류 메시지를 정리하여 보여줌
- 프로세싱 기능 : 그림 그리기 프로그램을 개발할 예정

---

### 컴퓨터 그림 그리기와 프로그래밍

- 종이를 준비하는 것은 컴퓨터에서 그림을 그릴 때의 하나의 요소
- 컴퓨터는 그림을 그릴 도구가 아니므로 화면 크기를 결정해야 함
- **사이즈(size)** 명령어를 사용하여 화면의 크기를 설정함
- 사이즈 명령어의 형식은 **사이즈(가로, 세로);**로 이루어짐
- 명령어는 항상 세미콜론 ’;’ 으로 끝나야 하며, 괄호 안에 매개변수를 넣어줌
- 함수는 컴퓨터에게 명령을 내리는 개념으로, 사이즈 명령어는 화면 크기를 설정하는 명령을 함

---

### 프로그래밍 언어의 학습과 레퍼런스

- 프로그래밍 언어는 언어이므로 사용법을 알아야 함
- 명령어마다 필요한 매개변수의 개수가 다름
- 이를 알기 위해 레퍼런스(사전)를 참조해야 함
- 프로세싱 사이트의 레퍼런스는 사용 가능한 명령어들을 보여줌
- 명령어를 찾는 데 필요한 시간과 노력은 언어 학습과 유사함
- 레퍼런스를 통해 필요한 명령어와 사용법을 익히면 됨

---

### 프로세싱의 사이즈 설정과 레퍼런스 활용

- 프로세싱에서 사이즈를 설정하기 위해 size() 함수를 사용
- size() 함수는 가로와 세로 크기를 매개변수로 받음
- 명령어 사용 시 세미콜론 ( ; )을 붙여야 함
- 세미콜론 ( ; ) 은 키보드에서 엔터 키 왼쪽에 있음
- 프로세싱 사이트의 레퍼런스에서 명령어 사용법을 참조할 수 있음
- 레퍼런스와 튜토리얼을 통해 프로세싱을 학습할 수 있음

---

### 프로세싱 레퍼런스 페이지 활용 방법

- 명령어 대한 설명을 확인하려면 레퍼런스 페이지를 참조
- 각 명령어는 예제와 설명으로 구성되어 있음
- 사이즈 명령어는 윈도우의 크기를 설정하는 명령어, 중간에 크기 변경할 수 없음
- 명령어의 문법과 매개변수 이해하고 사용해야 함
- 레퍼런스 페이지에서 명령어 우클릭하여 찾기 클릭하면 설명 나옴
- 프로세싱 소프트웨어에 내장된 레퍼런스 통해 인터넷 연결 없이도 확인 가능

---

### 포인트, 라인, 면 그리기 예시

- 점 찍기 : point() 명령어 사용하여 좌표값 지정하여 화면에 점 찍을 수 있음
- 선 그리기 : line() 명령어 사용하여 두 점을 연결하여 직선을 그릴 수 있음
- 면 그리기 : 다양한 도형을 그릴 수 있으며, 보통 사각형이나 다각형 모양으로 그림 그릴 수 있음

---

### 픽셀 위치에서 네모 그리기

- 네모 그리기: rect() 명령어 사용하여 좌표와 너비, 높이를 지정하여 화면에 네모 그릴 수 있음
    - 매개변수 : x 좌표, y 좌표, 너비, 높이
    - 예시 : rect(200, 100, 250, 250)은 좌측 상단을 기준으로 x가 200, y가 100인 위치에서 너비 250, 높이 250의 네모 그림

---

### 프로세싱 2D 기본 도형 그리기

- 기본 도형 명령어
    - point : 점
    - rect : 직사각형
    - arc : 호
    - circle : 원
    - ellipse : 타원
    - quad : 사각형
    - square : 정사각형
    - triangle : 삼각형
    - polygon : 다각형
- 명령어 사용법
    - 각 명령어는 다양한 매개변수를 필요로 함
    - ellipse의 경우 중심점과 너비, 높이 지정해야 함
- 실행 순서
    - 프로그램은 위에서 아래로 순차적으로 실행
    - 창을 만들고, 점을 찍고, 선과 도형을 그리는 순서로 실행
    - 겹치는 도형은 순서를 조절하여 처리해야 함

---

### 색상 지정 방법

- 색상을 지정하는 방법
    - 숫자 하나만 입력하여 색상 지정할 수 있음
    - stroke 명령어로 외곽선의 색상 변경할 수 있음
- 색상 변경 순서
    - 그림 그리기 전에 색상을 먼저 선택해야 함
    - 색상 선택한 후에 그림 그려야 선택한 색상이 적용
- 색상 값 범위
    - 0에서 255 사이의 숫자를 입력하여 색상 지정할 수 있음
    - 컴퓨터가 색상을 8비트 단위로 계산하기 때문
- 색상 값의 이해
    - 0부터 255까지의 숫자는 이진수로 표현
    - 각 비트의 조합으로 다양한 색상을 표현할 수 있음
- 컴퓨터에서 색상을 처리하는 방식
    - 색상은 8비트 단위로 계산됨
    - 0에서 255 사이의 숫자로 색상 지정해야 함
- 색상 값의 의미
    - 0은 검정색, 255는 흰색을 나타냄
    - 중간값은 회색으로 표시
- 빛의 삼원색
    - 빨간색, 녹색, 파란색 값 조합하여 원하는 색상 만듦
    - 각 색상에 대해 0에서 255 사이의 숫자로 밝기 값 입력함
- 색상 선택의 불편함
    - 숫자로 색상 지정하는 것은 어려울 수 있음
    - 색상 선택 도구 사용하여 직관적으로 색상을 선택할 수 있음
    - 선택한 색상의 RGB 값을 숫자로 입력하여 사용 가능함

---

### 색상 변경 방법

- 외곽선 색상 변경
    - stroke() 명령어를 사용하여 선의 색상을 변경할 수 있음
    - 하나의 매개 변수로는 그레이 스케일 색상, 세 개의 매개 변수로는 RGB 색상을 지정함
- 내부 면의 색상 변경
    - fill() 명령어를 사용하여 면의 색상을 변경할 수 있음
    - 하나의 매개 변수로는 그레이 스케일 색상, 세 개의 매개 변수로는 RGB 색상을 지정함
- 색상 선택 방법
    - 색상 선택 창을 통해 원하는 색상 선택함
    - 선택한 색상의 RGB 값을 stroke() 또는 fill() 명령어에 입력하여 색상 변경함

---

### 투명도 설정 방법

- 외곽선 색상의 투명도 설정
    - stroke() 명령어를 사용하여 선의 색상을 변경하고, 투명도를 조절할 수 있음
    - 마지막 매개 변수로 알파 값(투명도)을 지정함
        
        0은 완전히 투명, 255는 완전히 불투명을 나타냄
        
- 면의 색상의 투명도 설정
    - fill() 명령어를 사용하여 면의 색상을 변경하고, 투명도를 조절할 수 있음
    - 마지막 매개 변수로 알파 값(투명도)을 지정함
        
        0은 완전히 투명, 255는 완전히 불투명을 나타냄
        
- 투명도 설정 시 주의사항
    - 색상을 선택할 때 알파 값도 함께 지정하여 투명도 조절함
    - noStroke() 명령어를 사용하여 외곽선을 없애거나, noFill() 명령어를 사용하여 면을 그리지 않음

---

### 색상과 투명도 설정 방법

- 선의 색상과 투명도 설정
    - stroke() 명령어로 선의 색상과 투명도를 지정함
    - noStroke() 명령어로 외곽선을 없앨 수 있음
- 면의 색상과 투명도 설정
    - fill() 명령어로 면의 색상과 투명도 지정함
    - noFill() 명령어로 면 그리지 않을 수 있음
- 투명도 설정 시 주의사항
    - 색상 선택 시 알파 값(투명도)도 함께 지정해야 함
    - noStroke() 명령어로 외곽선을 없앨 수 있음
    - noFill() 명령어로 면을 그리지 않을 수 있음

---

### 프로세싱 프로그래밍의 기본 구조

- setup() 함수: 프로그램 초기 설정 및 준비 단계를 처리하는 함수
    - 프로그램 실행 시 한 번만 실행됨
    - 화면 크기 설정 등 초기화 작업 수행
- draw() 함수: 그림 그리기 및 반복적인 작업을 처리하는 함수
    - 프로그램 실행 후 계속해서 반복 실행됨
    - 주로 그림 그리기, 반복 작업 등을 수행함
- 프로그램 실행 흐름
    - setup() 함수는 프로그램 시작 시 한 번 실행되며, 초기화 작업 수행함
    - draw() 함수는 프로그램이 실행되는 동안 반복해서 실행되며, 그림 그리기와 반복 작업 처리함
- 반복 작업
    - 그림을 그리거나 반복 작업을 처리할 때는 draw() 함수 내부에 코드 작성함
    - 필요한 경우 반복 작업 처리하는 코드를 중괄호 {}로 묶어서 구분함

---
